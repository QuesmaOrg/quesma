# Default values for quesma.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: quesma/quesma
  pullPolicy: Always # We might change to `IfNotPresent` in the future, but for now we're actively pushing :muscle:
  tag: "" # It's set in `deployment.yaml` template

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  tcpSocket:
    port: 8080
  initialDelaySeconds: 5
  periodSeconds: 60
readinessProbe:
  tcpSocket:
    port: 8080
  initialDelaySeconds: 10
  periodSeconds: 60

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes:
  - name: quesma-config-volume
    configMap:
      name: quesma-first-config

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
  - name: quesma-config-volume
    mountPath: /quesma-configuration/quesma-config.yaml
    subPath: quesma-config.yaml

nodeSelector: {}

tolerations: []

affinity: {}

# These are environment variables passed to Quesma container
env:
  - name: QUESMA_CONFIG_FILE
    value: "/quesma-configuration/quesma-config.yaml"


### These are default configuration options
#   which are rendered into Quesma config file
config:
  quesmaConfigurationYaml:
      licenseKey: #PLACE_YOUR_QUESMA_LICENSE_KEY_HERE
      logging:
        level: "debug"
        fileLogging: true
      frontendConnectors:
        - name: elastic-ingest
          type: elasticsearch-fe-ingest
          config:
            listenPort: 8080
            disableAuth: true
        - name: elastic-query
          type: elasticsearch-fe-query
          config:
            listenPort: 8080
            disableAuth: true
      backendConnectors:
        - name: my-minimal-elasticsearch
          type: elasticsearch
          config:
            url: "http://elasticsearch:9200"
        - name: my-sqldb-data-source
          type: #PLACE_YOUR_CONNECTOR_TYPE_HERE - `clickhouse`, `hydrolix` or `clickhouse-os`
          config:
            url: #PLACE_YOUR_SQL_URL_HERE
            user: #PLACE_YOUR_SQL_USER_HERE
            password: #PLACE_YOUR_SQL_PASS_HERE
            database: #PLACE_YOUR_SQL_DB_NAME_HERE
      processors:
        - name: my-query-processor
          type: quesma-v1-processor-query
          config:
            indexes:
              my_example_table:
                target: [ my-sqldb-data-source ]
              '*':
                target: [ my-sqldb-data-source ]
        - name: my-ingest-processor
          type: quesma-v1-processor-ingest
          config:
            indexes:
              my_example_table:
                target: [ my-sqldb-data-source ]
              '*':
                target: [ my-sqldb-data-source ]
      pipelines:
        - name: my-sqldb-query-pipeline
          frontendConnectors: [ elastic-query ]
          processors: [ my-query-processor ]
          backendConnectors: [ my-minimal-elasticsearch, my-sqldb-data-source ]
        - name: my-sqldb-ingest-pipeline
          frontendConnectors: [ elastic-ingest ]
          processors: [ my-ingest-processor ]
          backendConnectors: [ my-minimal-elasticsearch, my-sqldb-data-source ]
