version: "3.7"
services:
  quesma:
    build: ../quesma
    image: quesma:latest
    env_file:
      # We require .env file to be present
      # and contain QUESMA_licenseKey with your personal license key
      - .env
    environment:
      - QUESMA_elasticsearch_url=http://opensearch:9200
      - QUESMA_port=8080
      - QUESMA_logging_path=/var/quesma/logs
      - QUESMA_clickhouse_url=clickhouse://clickhouse:9000
      - QUESMA_CONFIG_FILE=/config/local-dev.yaml
    depends_on:
      clickhouse:
        condition: service_healthy
      opensearch:
        condition: service_healthy
    links:
      - opensearch
    ports:
      - "9999:9999"
      - "8080:8080"
    volumes:
      - ./quesma/logs/:/var/quesma/logs
      - ./quesma/config:/config # mount local config for indices
    restart: unless-stopped
  device-log-generator:
    build: device-log-generator
    image: device-log-generator:latest
    depends_on:
      mitmproxy:
        condition: service_healthy
    links:
      - "mitmproxy"
    restart: unless-stopped
  log-generator:
    build: log-generator
    image: log-generator:latest
    depends_on:
      mitmproxy:
        condition: service_healthy
    links:
      - "mitmproxy"
    restart: unless-stopped
  opensearch:
    image: opensearchproject/opensearch:2.12.0
    container_name: opensearch
    environment:
      - cluster.name=opensearch-cluster
      - node.name=opensearch
      - discovery.type=single-node
      - bootstrap.memory_lock=true  # along with the memlock settings below, disables swapping
      - OPENSEARCH_JAVA_OPTS=-Xms1024m -Xmx1024m  # minimum and maximum Java heap size, recommend setting both to 50% of     system RAM
      - "DISABLE_INSTALL_DEMO_CONFIG=true" # Prevents execution of bundled demo script which installs demo certificates and security configurations to OpenSearch
      - "DISABLE_SECURITY_PLUGIN=true" # Disables Security plugin
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9201:9200"
      - "9300:9300"
    healthcheck:
      test: curl -s http://opensearch:9200 >/dev/null || exit 1
      start_period: 1m
      interval: 5s
      timeout: 1s
    deploy:
      resources:
        limits:
          memory: 4G
  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:2.12.0
    links:
      - "mitmproxy"
    environment:
      - 'OPENSEARCH_HOSTS=["http://mitmproxy:8080"]'
      - "DISABLE_SECURITY_DASHBOARDS_PLUGIN=true"
    depends_on:
      mitmproxy:
        condition: service_healthy
      quesma:
        condition: service_healthy
      opensearch:
        condition: service_healthy
    ports:
      - "5601:5601"
    restart: unless-stopped
    healthcheck:
      test: "curl -s http://localhost:5601/api/status >/dev/null || exit 1"
      start_period: 2m
      interval: 5s
      timeout: 1s
  opensearch-dashboards-sidecar:
    image: opensearchproject/opensearch-dashboards:2.12.0
    restart: "no"
    links:
      - "opensearch-dashboards"
    depends_on:
      opensearch-dashboards:
        condition: service_healthy
    volumes:
      - ./kibana/:/local_mount
    command: ["/bin/bash", "-c", "/local_mount/add_osd_sample_data.sh"]
  clickhouse:
    image: clickhouse/clickhouse-server:23.12.2.59-alpine
    ports:
      - "8123:8123"
      - "9000:9000"
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://clickhouse:8123/ping || exit 1
      interval: 1s
      timeout: 1s
      start_period: 1m
  mitmproxy:
    image: mitmproxy/mitmproxy:10.1.5
    tty: true
    ports:
      - "9200:8080"
      - "8081:8081"
    command: >
      mitmweb --set termlog_verbosity=warn --no-web-open-browser --web-host 0.0.0.0 --mode reverse:http://quesma:8080/
    # -s /var/mitmproxy/request.py
    # Uncomment above, if you would like to log requests using mitmproxy/request.py
    #   The files will be available in mitmproxy/{query,requests}/*.txt
    depends_on:
      quesma:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./mitmproxy:/var/mitmproxy
    healthcheck:
      # No curl/wget, going old school
      test: timeout 10s bash -c ':> /dev/tcp/127.0.0.1/8080' || exit 1
      interval: 1s
      start_period: 1m
      timeout: 1s
  # TODO: add clean, skip for now
