version: "3.7"
# Run this Docker Compose file with
#   HOST_IP=$(ifconfig en0 | awk '/inet / {print $2}') docker-compose -f docker/local-debug-with-security.yml up
services:
  quesma: ## Can be commented out if you want to just run Quesma from IDE
    build: ../quesma
    image: quesma:latest
    network_mode: "bridge"
    environment:
      - ELASTICSEARCH_URL=https://elasticsearch:9200
      - ELASTICSEARCH_USER=elastic
      - ELASTICSEARCH_PASSWORD=quesmaquesma
      - TCP_PORT=8080
      - LOGS_PATH=/var/quesma/logs
      - CLICKHOUSE_URL=clickhouse://clickhouse:9000
    depends_on:
      elasticsearch:
        condition: service_healthy
    links:
      - elasticsearch
      - clickhouse
    ports:
      - "9999:9999"
      - "8080:8080"
    volumes:
      - ./quesma/logs/:/var/quesma/logs
      - ./security/ca/ca.crt:/etc/ssl/certs/local-elastic-ca.pem
    restart: unless-stopped
  setup-ssl: # one-off container to set the password for kibana_system user once Elastic's up&running
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    container_name: setup-ssl
    network_mode: "bridge"
    restart: "no"
    volumes:
      - ./security/:/setup-ssl
    command: >
      /setup-ssl/generate-certs.sh
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    container_name: elasticsearch
    network_mode: "bridge"
    environment:
      discovery.type: single-node
      xpack.security.enrollment.enabled: true
      ES_JAVA_OPTS: "-Xms1024m -Xmx1024m"
      ELASTIC_PASSWORD: quesmaquesma # Username will be `elastic`, you can use this account to log in to Kibana. This is the "superuser" account
      xpack.security.enabled: true
      xpack.security.http.ssl.enabled: true
      # these certs are generated by the setup-ssl container
      xpack.security.http.ssl.certificate: "/usr/share/elasticsearch/config/certs/es.local/es.local.crt"
      xpack.security.http.ssl.key: "/usr/share/elasticsearch/config/certs/es.local/es.local.key"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - ./security:/usr/share/elasticsearch/config/certs
    healthcheck:
      test: curl -s -k https://localhost:9200 >/dev/null || exit 1
      start_period: 1m
      interval: 1s
      timeout: 1s
    depends_on:
      setup-ssl:
        condition: service_completed_successfully
    deploy:
      resources:
        limits:
          memory: 4G
  mitmproxy:
    image: mitmproxy/mitmproxy:10.1.5
    container_name: mitmproxy
    network_mode: "bridge"
    tty: true
    ports:
    - "6666:6666"
    - "8081:8081"
    command: >
      mitmweb --set termlog_verbosity=warn --no-web-open-browser --listen-port 6666 --web-host 0.0.0.0 --mode reverse:http://${HOST_IP}:8080/
    restart: unless-stopped
    volumes:
      - ./mitmproxy:/var/mitmproxy
  setup-kibana-password: # one-off container to set the password for kibana_system user once Elastic's up&running
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    container_name: setup-kibana-password
    network_mode: "bridge"
    restart: "no"
    links:
      - "elasticsearch"
    depends_on:
      elasticsearch:
        condition: service_healthy
    command: >
      curl -H "Content-type: application/json" -k -u "elastic:quesmaquesma" https://elasticsearch:9200/_security/user/kibana_system/_password -d '{"password": "kibanana"}'
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.1
    container_name: kibana
    links:
      - "elasticsearch"
      - "mitmproxy"
    network_mode: "bridge"
    environment:
      ELASTICSEARCH_SSL_VERIFICATIONMODE: none  # This keeps certificate verification off, think `curl -k`
      ELASTICSEARCH_HOSTS: '["http://mitmproxy:6666"]' # Even though security is enabled, we can still keep using http here so why not leverage the opportunity
      ELASTICSEARCH_USERNAME: kibana_system # 'elastic' is reserved for superuser, Kibana won't allow using it
      ELASTICSEARCH_PASSWORD: kibanana
      XPACK_SECURITY_ENABLED: true
      XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY: 'QUESMAQUESMAQUESMAQUESMAQUESMAQUESMAQUESMAQUESMA' # Just to get rid of annoying ERROR in logs
#      LOGGING_ROOT_LEVEL: 'debug'
    volumes:
      - ./security:/sec
    depends_on:
      elasticsearch:
        condition: service_healthy
    ports:
      - "5601:5601"
    restart: unless-stopped
    healthcheck:
      test: "curl -s http://localhost:5601/api/status >/dev/null || exit 1"
      start_period: 2m
      interval: 1s
      timeout: 1s
  kibana-sidecar:
    image: docker.elastic.co/kibana/kibana:8.11.1
    container_name: kibana-sidecar
    network_mode: "bridge"
    restart: "no"
    environment:
      - ELASTICSEARCH_USER=elastic
      - ELASTICSEARCH_PASSWORD=quesmaquesma
    links:
      - "kibana"
      - "mitmproxy"
    depends_on:
      kibana:
        condition: service_healthy
    volumes:
      - ./kibana/:/local_mount
    command: ["/bin/bash", "-c", "/local_mount/add_sample_data.sh"]
  clickhouse:
    image: clickhouse/clickhouse-server:23.12.2.59-alpine
    container_name: clickhouse
    network_mode: "bridge"
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - ./clickhouse/additional_config.xml:/etc/clickhouse-server/users.d/additional_config.xml
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8123/ping || exit 1
      interval: 1s
      timeout: 1s
      start_period: 1m

